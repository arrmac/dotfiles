" Add a local leader which is also ,
let maplocalleader=","

" This is totally awesome - remap jj to escape in insert mode.  You'll never type jj anyway, so it's great!
inoremap jj <esc>
inoremap kk <esc>

" Indentation
set shiftwidth=2
set softtabstop=2
set tabstop=2

" Fast saving
nmap ;w :w!<cr>
"imap ;w <esc>:w!<cr>a
imap ;w <esc>:w!<cr>

" set text width default
set textwidth=100

" Add emacs beginning and end of line
map <c-a> ^
map! <c-a> <c-o>^
map <c-e> $
map! <c-e> <c-o>$

" NERDTreeToggle
nnoremap <c-n> :NERDTreeToggle<cr>

" stop highlighting after I searched
nmap <silent> // :nohlsearch<cr>

" rerun last command
nmap <c-b> 1@:

" Moving between split windows
map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-h> <c-w>h
map <c-l> <c-w>l

" toggle paste mode
nmap <LocalLeader>pp :set paste!<cr>

" Set filetype for troublesome types
augroup filetype
  autocmd!
  autocmd BufRead,BufNewFile *.proto set ft=proto
  autocmd BufRead,BufNewFile *.go set ft=go
augroup end

" Automatic formating on save
augroup go
  autocmd!
  autocmd FileType go autocmd BufWritePre <buffer> Fmt
  autocmd FileType go setlocal noexpandtab
augroup end

" remove trailing whitespace and pesky ^M
augroup whitespace
  autocmd!
  autocmd BufWritePre * :%s/[ \t\r]\+$//e
augroup end

" MultiCursor bundle mappings
 let g:multicursor_quit = "<LocalLeader>qq"
 nnoremap <LocalLeader>qp :<c-u>call MultiCursorPlaceCursor()<cr>
 nnoremap <LocalLeader>qm :<c-u>call MultiCursorManual()<cr>
 nnoremap <LocalLeader>qr :<c-u>call MultiCursorRemoveCursors()<cr>
 xnoremap <LocalLeader>qv :<c-u>call MultiCursorVisual()<cr>
 nnoremap <LocalLeader>qs :<c-u>call MultiCursorSearch('')<cr>

 "jump to last cursor position when opening a file
"don't do it when writing a commit log entry
"augroup cursor
  "autocmd!
  "autocmd BufReadPost * call SetCursorPosition()
"augroup end
"function! SetCursorPosition()
  "if &filetype !~ 'svn\|commit\c'
    "if line("'\"") > 0 && line("'\"") <= line("$")
      "exe "normal! g`\""
      "normal! zz
    "endif
  "end
"endfunction

" Slime configuration
let g:slime_target = "tmux"

if has("macunix")
  vmap <c-x> :!pbcopy<cr>
  vmap <c-c> :w !pbcopy<cr><cr>
elseif has("x")
end
